https://git-school.github.io/visualizing-git/#free
NEVER MERGE A PULL REQUEST ON MAIN BRANCH, AS EACH TIME BEFORE MERGING, IF YOU COMMIT ANYTHING, IT WILL BE ADDED TO THAT BRANCH AGAIN AND TO THAT PULL REQUEST ONLY, AND IT WILL BECOME HEFTY. FOR EG. IF WE WANT TO ADD 2 NEW FEATURES, IF WE DO NOT MAKE TWO NEW DIFFERENT BRANCHES, OUR BOTH PULL REQUEST WILL BE COMBINED INTO A SINGLE PULL REQUEST ONLY, IT WONT ALLOW A NEW PULL REQUEST FOR THE SAME BRANCH, SO IF WE MAKE NEW BRANCHES FOR EACH PULL REQUEST, WE WILL BE ABLE TO MANAGE BOTH THE FEATURES DIFFERENTLY.
HEAD IS LIKE THE POINTER TO WHICH WE ARE FOCUSING CURRENTLY, FOR EG. IF HEAD IS ON MASTER BRANCH, OUT CHANGES ARE BEING STORES IN MASTER BRANCH
1.   CHECK THE ITEMS IN DIRECTORY == ls OR dir
2.   CHECK THE HIDDEN ITEMS == ls -a
3.   OPEN ANY ITEM IN CMD == cat [NAME]
4.   DELETE A FILE == rm -rf [NAME]
5.   CHANGE DIRECTORY == cd [NAME]
6.   MAKE A NEW FILE == touch [NAME.TYPE]
7.   INITIALIZE GIT == git init
8.   SEE CHANGES IN FILE SINCE LAST COMMIT == git status
9.   ADD CHANGES TO STAGE == git add [NAME] 
10.  ADD CHANGES TO STAGE ALL == git add .
11.  REMOVE FROM STAGE == git restore --staged [NAME]
12.  COMMIT CHANGES == git commit -m "[MESSAGE]"
13.  SEE HISTORY OF COMMITS == git log
14.  TO COME OUT OF HISTORY OF COMMITS == q
15.  DELETE COMMITS == git reset [HASH ID OF THE COMMIT JUST BELOW IT]
16.  STASHING THE FILES BACKSTAGE FROM THE STAGE == git stash
17.  BRING BACK STASHED FILES == git stash pop
18.  DELETE FROM STASH PERMANENTLY == git stash clear
19.  ADD URL OF REPOSITORY TO FOLDER == git remote add origin [URL] ((HERE, REMOTE MEANS WORKING WITH URLS, ADD MEANS ADDING A NEW URL, ORIGIN IS THE NAME OF THE URL WE ARE GOING TO ADD (BY CONVENTION)))
20.  SHOW ALL URLS ATTACHED TO THE FOLDER == git remote -v
21.  PUSH THE CHANGES OF FOLDER TO REPOSITORY == git push origin master ((HERE, PUSH MEANS TO PUSH TO REPO, ORIGIN MEANS NAME OF THE URL WHERE IT IS TO BE PUSHED, MASTER IS THE NAME OF THE BRANCH THAT IS TO BE PUSHED))
22.  MAKE A NEW BRANCH == git branch [NAME]
23.  SWITCH TO ANOTHER BRANCH == git checkout [BRANCH NAME ON WHICH YOU WANT TO GO]
24.  CLONE A FORKED REPOSITORY == git clone [FORKED REPO LINK]
25.  ADDING URL FROM UPSTREAM == git remote add upstream [LINK OF REAL REPO(NOT FORKED)]
26.  REMOVING A COMMIT FROM PULL REQUEST BY FORCE == git push origin master -f
27.  SQUASH COMMITS == git rebase -i [COMMIT HASH ABOVE WHICH WE WILL WORK], AFTER THAT ALL THE SQUASH WILL MOVE TO THE ABOVE PICK OF THEM
